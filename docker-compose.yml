# docker-compose.yml
version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: digital_library_db
    environment:
      POSTGRES_DB: digital_library
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - digital_library_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d digital_library"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: digital_library_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: digital_library
      DB_USER: postgres
      DB_PASSWORD: password
      FRONTEND_URL: http://localhost:3000
      JWT_SECRET: super-secret-jwt-key-for-production
      EXTERNAL_DATA_URL: https://yunautama.xyz/serveran/data.json
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    networks:
      - digital_library_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: digital_library_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_APP_NAME: "Perpustakaan Digital"
      REACT_APP_VERSION: "1.0.0"
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/build
    networks:
      - digital_library_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: digital_library_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - digital_library_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: digital_library_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - digital_library_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  digital_library_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---
# docker-compose.dev.yml - Development Override
version: "3.8"

services:
  backend:
    environment:
      NODE_ENV: development
    command: npm run dev
    volumes:
      - ./backend:/app
      - /app/node_modules

  frontend:
    environment:
      REACT_APP_ENVIRONMENT: development
    command: npm start
    volumes:
      - ./frontend:/app
      - /app/node_modules

  postgres:
    ports:
      - "5432:5432"

---
# docker-compose.prod.yml - Production Override
version: "3.8"

services:
  backend:
    environment:
      NODE_ENV: production
    command: npm start
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    environment:
      REACT_APP_ENVIRONMENT: production
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  postgres:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  nginx:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
